{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_tellorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralPriceGranularity",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_inflRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_inflBeneficiary",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "CollateralPriceAge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "CollateralThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensAmnt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmnt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralPenalty",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LiquidationPenatly",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralRatio",
          "type": "uint256"
        }
      ],
      "name": "MintTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmnt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralRatio",
          "type": "uint256"
        }
      ],
      "name": "WithdrawCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmnt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmnt",
          "type": "uint256"
        }
      ],
      "name": "WithdrawToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralPriceAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralPriceGranularity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inflBeneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inflLastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inflRatePerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationPenatly",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "setCollateralPriceAge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "setCollateralThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationPenatly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateInflation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x069361b6e69b90aebb24dd9b2c0a008968af0f3c79c9b34b94c676742b4a1f65",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "4069899",
    "logsBloom": "0x
    "blockHash": "0xb630e82d1806ad5e9fd4953bc20ae398c0d38f9df2d9675918d8a83b66ba4ba0",
    "transactionHash": "0x069361b6e69b90aebb24dd9b2c0a008968af0f3c79c9b34b94c676742b4a1f65",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "4069899",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    1,
    1000000,
    "Note",
    "NTO",
    "105170917901244400",
    "0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc"
  ],
  "solcInputHash": "bfb8dafb003d13c8b2d17694898738e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tellorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralPriceGranularity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_inflRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inflBeneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CollateralPriceAge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CollateralThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmnt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmnt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralPenalty\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LiquidationPenatly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"}],\"name\":\"MintTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmnt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"}],\"name\":\"WithdrawCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmnt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmnt\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPriceAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPriceGranularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflRatePerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationPenatly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"setCollateralPriceAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"setCollateralThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"setLiquidationPenatly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateInflation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Chorus.sol\":\"Chorus\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Chorus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"./OracleGetter.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Inflation.sol\\\";\\n\\ncontract Chorus is Inflation, OracleGetter, ERC20 {\\n    event CollateralThreshold(uint256);\\n    event CollateralPriceAge(uint256);\\n    event LiquidationPenatly(uint256);\\n    event WithdrawCollateral(\\n        address,\\n        uint256 collateralAmnt,\\n        uint256 collateralRatio\\n    );\\n    event WithdrawToken(address, uint256 tokenAmnt, uint256 collateralAmnt);\\n    event Liquidate(\\n        address,\\n        uint256 tokensAmnt,\\n        uint256 collateralAmnt,\\n        uint256 collateralPenalty\\n    );\\n    event MintTokens(\\n        address,\\n        uint256 amount,\\n        address to,\\n        uint256 collateralRatio\\n    );\\n\\n    address public admin = msg.sender;\\n    uint256 private tknPrice = 1e18;\\n\\n    uint256 public collateralID; // The collateral id used to check the Tellor oracle for its USD price.\\n    uint256 public collateralPriceGranularity;\\n    ERC20 public collateralToken;\\n    uint256 public collateralThreshold = 15e17; // 150%.\\n    uint256 public collateralPriceAge = 3600; // 1h.\\n    uint256 public liquidationPenatly = 0;\\n\\n    // The rate at which the token decreases value.\\n    // 1e18 precision. 100e18 is 100%.\\n    uint256 public inflRatePerSec;\\n    uint256 public inflLastUpdate = block.timestamp;\\n    address public inflBeneficiary; // Where to send the inflation tokens.\\n\\n    constructor(\\n        address payable _tellorAddress,\\n        address _collateralToken,\\n        uint256 _collateralID,\\n        uint256 _collateralPriceGranularity,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint256 _inflRatePerYear,\\n        address _inflBeneficiary\\n    )\\n        OracleGetter(_tellorAddress)\\n        ERC20(_tokenName, _tokenSymbol)\\n        within100e18Range(_inflRatePerYear)\\n        within1e18Range(_collateralPriceGranularity)\\n    {\\n        // TODO Check if token ID is supported by the oracle and returns the price in USD.\\n        // For now assume that the contract creator knows what he is doing.\\n        // The collateral ID needs to return the value in USD.\\n        collateralID = _collateralID;\\n        collateralToken = ERC20(_collateralToken);\\n        collateralPriceGranularity = _collateralPriceGranularity;\\n\\n        require(_inflBeneficiary != address(0), \\\"benificiary address not set\\\");\\n        inflBeneficiary = _inflBeneficiary;\\n        inflRatePerSec = yearlyRateToPerSec(_inflRatePerYear);\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"not an admin\\\");\\n        _;\\n    }\\n\\n    modifier within100e18Range(uint256 value) {\\n        require(value > 0 && value < 100e18, \\\"value not within allowed limits\\\");\\n        _;\\n    }\\n\\n    modifier within1e18Range(uint256 value) {\\n        require(value > 0 && value <= 1e18, \\\"value not within allowed limits\\\");\\n        _;\\n    }\\n\\n    function depositCollateral(uint256 wad) external onlyAdmin {\\n        require(wad > 0, \\\"deposit amount 0\\\");\\n        require(\\n            collateralToken.transferFrom(msg.sender, address(this), wad),\\n            \\\"failed collateral deposit transfer\\\"\\n        );\\n    }\\n\\n    // Anyone can deposit collateral, but only admin can withdraw.\\n    // Otherwise the logic for how much tokens a given collateral provider can mint becomes more complicated.\\n    // If we track the balance of each collateral provider then\\n    // he should be allowed to mint up to the maximum amount based on his collateral deposit share.\\n    // Otherwise lets say a provider deposits 1ETH and mints all tokens to himself\\n    // can drain the collateral of all providers.\\n    function withdrawCollateral(uint256 wad) external onlyAdmin {\\n        uint256 cRatio =\\n            _collateralRatio(\\n                sub(collateralToken.balanceOf(address(this)), wad),\\n                totalSupply()\\n            );\\n        // slither-disable-next-line reentrancy-events\\n        emit WithdrawCollateral(msg.sender, wad, cRatio);\\n        require(\\n            cRatio < collateralThreshold,\\n            \\\"collateral utilization above the threshold\\\"\\n        );\\n        require(\\n            collateralToken.transfer(msg.sender, wad),\\n            \\\"collateral transfer fails\\\"\\n        );\\n    }\\n\\n    // Calculate how much percents of the total supply this sender owns and\\n    // can withdraw the same amount of percents minus the liquidation penalty.\\n    // Example:\\n    // token totalSupply is 10000,\\n    // collateral totalSupply is 1000\\n    // sender owns 1000 (10% of token totalSupply)\\n    // with penatly 0% sender can withdraw 100 collateral(10% of collateral total supply)\\n    // with penatly 10% sender can withdraw 90 collateral\\n    function liquidate() external {\\n        require(\\n            collateralRatio() > collateralThreshold,\\n            \\\"collateral utilizatoin is below threshold\\\"\\n        );\\n        require(balanceOf(msg.sender) > 0, \\\"msg sender doesn't own any tokens\\\");\\n\\n        uint256 tknSuplyRatio =\\n            wdiv(collateralToken.balanceOf(address(this)), totalSupply());\\n        uint256 tokensToBurn = balanceOf(msg.sender);\\n        uint256 collatAmt = wmul(tokensToBurn, tknSuplyRatio);\\n        uint256 collatPenalty = wmul(collatAmt, liquidationPenatly);\\n        uint256 collatAmntMinusPenalty = sub(collatAmt, collatPenalty);\\n\\n        emit Liquidate(msg.sender, tokensToBurn, collatAmt, collatPenalty);\\n        _burn(msg.sender, tokensToBurn);\\n        require(\\n            collateralToken.transfer(msg.sender, collatAmntMinusPenalty),\\n            \\\"collateral liquidation transfer fails\\\"\\n        );\\n        require(\\n            collateralToken.transfer(inflBeneficiary, collatPenalty),\\n            \\\"collateral liquidation penalty transfer fails\\\"\\n        );\\n    }\\n\\n    // Reduce token price by the inflation rate,\\n    // increases the total supply by the inflation rate and\\n    // sends the new tokens to the inflation beneficiary.\\n    // slither-disable-next-line timestamp\\n    function updateInflation() external {\\n        uint256 secsPassed = block.timestamp - inflLastUpdate;\\n        require(secsPassed > 0, \\\"no inflation increase yet\\\");\\n\\n        inflLastUpdate = block.timestamp;\\n        tknPrice = accrueInflation(tknPrice, inflRatePerSec, secsPassed);\\n\\n        uint256 tokensToMint =\\n            sub(\\n                accrueInterest(totalSupply(), inflRatePerSec, secsPassed),\\n                totalSupply()\\n            );\\n\\n        _mint(inflBeneficiary, tokensToMint);\\n    }\\n\\n    function collateralRatio() public view returns (uint256) {\\n        return\\n            _collateralRatio(\\n                collateralToken.balanceOf(address(this)),\\n                totalSupply()\\n            );\\n    }\\n\\n    function _collateralRatio(uint256 _collateralBalance, uint256 _tSupply)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(_collateralBalance > 0, \\\"collateral total supply is zero\\\");\\n        if (_tSupply == 0) {\\n            return 0;\\n        }\\n\\n        uint256 collateralValue = wmul(collateralPrice(), _collateralBalance);\\n\\n        uint256 secsPassed = block.timestamp - inflLastUpdate;\\n        uint256 tokenSupplyWithInflInterest =\\n            accrueInterest(_tSupply, inflRatePerSec, secsPassed);\\n\\n        uint256 tokenValue = wmul(tokenPrice(), tokenSupplyWithInflInterest);\\n\\n        return add(1e18, wdiv(tokenValue, collateralValue));\\n    }\\n\\n    // Returns the collateral price in USD upscaled to e18 precision.\\n    // slither-disable-next-line timestamp\\n    function collateralPrice() public view returns (uint256) {\\n        (bool _didGet, uint256 _collateralPrice, ) =\\n            _getDataBefore(collateralID, block.timestamp - collateralPriceAge);\\n        require(_didGet, \\\"getting oracle price\\\");\\n        return mul(_collateralPrice, div(1e18, collateralPriceGranularity));\\n    }\\n\\n    // WARNING You would usually want to put this through a vote from the token holders\\n    // or the collateral provider can set it very low and drain all collateral.\\n    // Usually the owner should be another contract so that\\n    // it is allowed to change it only after a vote from the token holders.\\n    function setCollateralThreshold(uint256 wad)\\n        external\\n        onlyAdmin\\n        within100e18Range(wad)\\n    {\\n        collateralThreshold = wad;\\n        emit CollateralThreshold(wad);\\n    }\\n\\n    function setCollateralPriceAge(uint256 wad) external onlyAdmin {\\n        collateralPriceAge = wad;\\n        emit CollateralPriceAge(wad);\\n    }\\n\\n    // WARNING You would usually want to put this through a vote from the token holders\\n    // or the admin can set it at 100% and during liquidation token holders will not receive any collateral.\\n    function setLiquidationPenatly(uint256 wad)\\n        external\\n        onlyAdmin\\n        within100e18Range(wad)\\n    {\\n        liquidationPenatly = wdiv(wad, 100e18); // Convert to a fraction.\\n        emit LiquidationPenatly(liquidationPenatly);\\n    }\\n\\n    // The max minted tokens can be up to the max utulization threshold.\\n    // Noone should be allowed to mint above the utilizationThreshold otherwise can drain the pool.\\n    function mintToken(uint256 amount, address to) external {\\n        _mint(to, amount);\\n        uint256 cRatio = collateralRatio();\\n        // slither-disable-next-line reentrancy-events\\n        emit MintTokens(msg.sender, amount, to, cRatio);\\n        require(\\n            cRatio < collateralThreshold,\\n            \\\"collateral utilization above the threshold\\\"\\n        );\\n    }\\n\\n    // Returns the current token price in USD reduced by the current inflation.\\n    function tokenPrice() public view returns (uint256) {\\n        return\\n            accrueInflation(\\n                tknPrice,\\n                inflRatePerSec,\\n                block.timestamp - inflLastUpdate\\n            );\\n    }\\n\\n    function collateralBalance() external view returns (uint256) {\\n        return collateralToken.balanceOf(address(this));\\n    }\\n\\n    function withdrawToken(uint256 amount) external {\\n        require(amount > 0, \\\"amount should be greater than 0\\\");\\n        require(balanceOf(msg.sender) >= amount, \\\"not enough balance\\\");\\n\\n        uint256 collatPrice = collateralPrice();\\n        uint256 priceRatio = wdiv(tokenPrice(), collatPrice);\\n        uint256 collateralAmnt = wmul(priceRatio, amount);\\n\\n        emit WithdrawToken(msg.sender, amount, collateralAmnt);\\n        _burn(msg.sender, amount);\\n\\n        require(\\n            collateralToken.transfer(msg.sender, collateralAmnt),\\n            \\\"collateral transfer fail\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x99f073c83fb3b1f8e57032c9e4de9ee0f1f805c20c0b4fc9945674e855e8e702\",\"license\":\"MIT\"},\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Taken from Openzeppeling implementation, but stripping Context.sol\\ncontract ERC20 is IERC20 {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] - subtractedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply + amount;\\n        _balances[account] = _balances[account] + amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account] - amount;\\n        _totalSupply = _totalSupply - amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n}\\n\\n// The contract is also an ERC20 token which holds the collateral currency.\\n// It also holds the semi stable token state inside the `token` variable.\\ncontract Mintable is ERC20 {\\n    function burn(address account, uint256 amount) external {\\n        _burn(account, amount);\\n    }\\n\\n    function mint(address account, uint256 amount) external {\\n        _mint(account, amount);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(string memory n, string memory s) ERC20(n, s) {}\\n}\\n\",\"keccak256\":\"0x7608f9b8598589633686e2fb4aeabc55a3112c53f640eaaf2ce77da43958bd19\",\"license\":\"MIT\"},\"contracts/Inflation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"./Math.sol\\\";\\n\\n// Borrowed from https://github.com/wolflo/solidity-interest-helper.\\n// Inspired by https://medium.com/coinmonks/math-in-solidity-part-4-compound-interest-512d9e13041b\\n// Using DSMath from DappHub https://github.com/dapphub/ds-math\\n\\n/**\\n * @title Interest\\n * @author Nick Ward\\n * @dev Uses DSMath's wad and ray math to implement (approximately)\\n * continuously compounding interest by calculating discretely compounded\\n * interest compounded every second.\\n */\\ncontract Inflation is DSMath {\\n    //// Fixed point scale factors\\n    // wei -> the base unit\\n    // wad -> wei * 10 ** 18. 1 ether = 1 wad, so 0.5 ether can be used\\n    //      to represent a decimal wad of 0.5\\n    // ray -> wei * 10 ** 27\\n\\n    // Go from wad (10**18) to ray (10**27)\\n    function wadToRay(uint256 _wad) internal pure returns (uint256) {\\n        return mul(_wad, 10**9);\\n    }\\n\\n    // Go from wei to ray (10**27)\\n    function weiToRay(uint256 _wei) internal pure returns (uint256) {\\n        return mul(_wei, 10**27);\\n    }\\n\\n    // The most accurate way to calculate inflation is a loop with\\n    // for (let i = 0; i < secsPassed; i++) {\\n    //  `tokenPrice -= tokenPrice * inflRatePerSec`\\n    // }\\n    // but this is too slow and expencive so this is an algorithm that has a very small precision error.\\n    // The magic formula from https://medium.com/coinmonks/math-in-solidity-part-4-compound-interest-512d9e13041b\\n    function accrueInflation(\\n        uint256 _principal,\\n        uint256 _rate,\\n        uint256 _age\\n    ) internal pure returns (uint256) {\\n        return rdiv(_principal, rpow(_rate, _age));\\n    }\\n\\n    /**\\n     * @dev Uses an approximation of continuously compounded interest\\n     * (discretely compounded every second)\\n     * @param _principal The principal to calculate the interest on.\\n     *   Accepted in wei.\\n     * @param _rate The interest rate. Accepted as a ray representing\\n     *   1 + the effective interest rate per second, compounded every\\n     *   second. As an example:\\n     *   I want to accrue interest at a nominal rate (i) of 5.0% per year\\n     *   compounded continuously. (Effective Annual Rate of 5.127%).\\n     *   This is approximately equal to 5.0% per year compounded every\\n     *   second (to 8 decimal places, if max precision is essential,\\n     *   calculate nominal interest per year compounded every second from\\n     *   your desired effective annual rate). Effective Rate Per Second =\\n     *   Nominal Rate Per Second compounded every second = Nominal Rate\\n     *   Per Year compounded every second * conversion factor from years\\n     *   to seconds\\n     *   Effective Rate Per Second = 0.05 / (365 days/yr * 86400 sec/day) = 1.5854895991882 * 10 ** -9\\n     *   The value we want to send this function is\\n     *   1 * 10 ** 27 + Effective Rate Per Second * 10 ** 27\\n     *   = 1000000001585489599188229325\\n     *   This will return 5.1271096334354555 Dai on a 100 Dai principal\\n     *   over the course of one year (31536000 seconds)\\n     * @param _age The time period over which to accrue interest. Accepted\\n     *   in seconds.\\n     * @return The new principal as a wad. Equal to original principal +\\n     *   interest accrued\\n     */\\n    function accrueInterest(\\n        uint256 _principal,\\n        uint256 _rate,\\n        uint256 _age\\n    ) internal pure returns (uint256) {\\n        return rmul(_principal, rpow(_rate, _age));\\n    }\\n\\n    /**\\n     * @dev Takes in the desired nominal interest rate per year, compounded\\n     *   every second (this is approximately equal to nominal interest rate\\n     *   per year compounded continuously). Returns the ray value expected\\n     *   by the accrueInterest function\\n     * @param _rateWad A wad of the desired nominal interest rate per year,\\n     *   compounded continuously. Converting from ether to wei will effectively\\n     *   convert from a decimal value to a wad.\\n     *   So 5% rate should be input as yearlyRateToRay( 0.05 ether )\\n     * @return 1 * 10 ** 27 + Effective Interest Rate Per Second * 10 ** 27\\n     */\\n\\n    function yearlyRateToPerSec(uint256 _rateWad)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            add(\\n                wadToRay(1 ether),\\n                rdiv(wadToRay(_rateWad), weiToRay(365 * 86400))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x0853a6bc17058efebc6031ee930794cf8689e1c2c34d9157a1a8457a173486da\",\"license\":\"MIT\"},\"contracts/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/dapphub/ds-math\\n// Added the div function from openzepeling safeMath\\n\\npragma solidity 0.8.3;\\n\\ncontract DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    // slither-disable-next-line incorrect-equality\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 public constant WAD = 10**18;\\n    uint256 public constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    // Not sure if this is a false positive - https://github.com/dapphub/ds-math/issues/18\\n    // slither-disable-next-line weak-prng\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x688abf511cdeddd678246077f3c729f73a41b0426b9a5c877f48c85470e18f9f\",\"license\":\"MIT\"},\"contracts/OracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\ninterface ITellor {\\n    function getNewValueCountbyRequestId(uint256 _requestId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTimestampbyRequestIDandIndex(uint256 _requestID, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function retrieveData(uint256 _requestId, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\ncontract OracleGetter {\\n    ITellor private tellor;\\n\\n    constructor(address payable _tellor) {\\n        tellor = ITellor(_tellor);\\n    }\\n\\n    // solhint-disable-next-line\\n    function _getIndexForDataBefore(uint256 _requestId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (bool found, uint256 index)\\n    {\\n        uint256 _count = tellor.getNewValueCountbyRequestId(_requestId);\\n        if (_count > 0) {\\n            uint256 middle;\\n            uint256 start = 0;\\n            uint256 end = _count - 1;\\n            uint256 _time;\\n\\n            //Checking Boundaries to short-circuit the algorithm\\n            _time = tellor.getTimestampbyRequestIDandIndex(_requestId, start);\\n            if (_time >= _timestamp) return (false, 0);\\n            _time = tellor.getTimestampbyRequestIDandIndex(_requestId, end);\\n            if (_time < _timestamp) return (true, end);\\n\\n            //Since the value is within our boundaries, do a binary search\\n            while (true) {\\n                middle = (end - start) / 2 + 1 + start;\\n                _time = tellor.getTimestampbyRequestIDandIndex(\\n                    _requestId,\\n                    middle\\n                );\\n                if (_time < _timestamp) {\\n                    //get imeadiate next value\\n                    uint256 _nextTime =\\n                        tellor.getTimestampbyRequestIDandIndex(\\n                            _requestId,\\n                            middle + 1\\n                        );\\n                    if (_nextTime >= _timestamp) {\\n                        //_time is correct\\n                        return (true, middle);\\n                    } else {\\n                        //look from middle + 1(next value) to end\\n                        start = middle + 1;\\n                    }\\n                } else {\\n                    uint256 _prevTime =\\n                        tellor.getTimestampbyRequestIDandIndex(\\n                            _requestId,\\n                            middle - 1\\n                        );\\n                    if (_prevTime < _timestamp) {\\n                        // _prevtime is correct\\n                        return (true, middle - 1);\\n                    } else {\\n                        //look from start to middle -1(prev value)\\n                        end = middle - 1;\\n                    }\\n                }\\n                //We couldn't found a value\\n                //if(middle - 1 == start || middle == _count) return (false, 0);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Allows the user to get the first value for the requestId before the specified timestamp\\n     * @param _requestId is the requestId to look up the value for\\n     * @param _timestamp before which to search for first verified value\\n     * @return _ifRetrieve bool true if it is able to retreive a value, the value, and the value's timestamp\\n     * @return _value the value retrieved\\n     * @return _timestampRetrieved the value's timestamp\\n     */\\n    function _getDataBefore(uint256 _requestId, uint256 _timestamp)\\n        internal\\n        view\\n        returns (\\n            bool _ifRetrieve,\\n            uint256 _value,\\n            uint256 _timestampRetrieved\\n        )\\n    {\\n        (bool _found, uint256 _index) =\\n            _getIndexForDataBefore(_requestId, _timestamp);\\n        if (!_found) return (false, 0, 0);\\n        uint256 _time =\\n            tellor.getTimestampbyRequestIDandIndex(_requestId, _index);\\n        _value = tellor.retrieveData(_requestId, _time);\\n        //If value is diputed it'll return zero\\n        if (_value > 0) return (true, _value, _time);\\n        return (false, 0, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x8181c9e4cf1737ef78787cdac93d228d29328137cbad2042214737ea478746a9\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c80636a14602411610125578063b2016bd4116100ad578063bad4a01f1161007c578063bad4a01f146105fd578063c98c05b714610619578063dd62ed3e14610637578063f06b465814610667578063f851a440146106835761021c565b8063b2016bd414610587578063b4eae1cb146105a5578063b8eb5e4b146105c3578063b93e0cb5146105e15761021c565b80639014de63116100f45780639014de63146104cf57806395d89b41146104ed578063a140ae231461050b578063a457c2d714610527578063a9059cbb146105575761021c565b80636a1460241461044557806370a08231146104635780637ff9b596146104935780638e8cfbde146104b15761021c565b8063401ce372116101a85780635891de72116101775780635891de72146103c557806359825a4c146103e35780636112fe2e146103ed57806364494074146104095780636479a566146104275761021c565b8063401ce3721461035157806348500ccf1461036d57806350baa6221461038b578063552033c4146103a75761021c565b806323b872dd116101ef57806323b872dd146102ab57806328a07025146102db57806329a150ba146102e5578063313ce5671461030357806339509351146103215761021c565b806306fdde0314610221578063095ea7b31461023f5780631527262b1461026f57806318160ddd1461028d575b600080fd5b6102296106a1565b604051610236919061368b565b60405180910390f35b61025960048036038101906102549190613037565b610733565b6040516102669190613655565b60405180910390f35b61027761074a565b6040516102849190613519565b60405180910390f35b610295610770565b6040516102a291906139cd565b60405180910390f35b6102c560048036038101906102c09190612fe8565b61077a565b6040516102d29190613655565b60405180910390f35b6102e3610824565b005b6102ed610bfe565b6040516102fa91906139cd565b60405180910390f35b61030b610c04565b6040516103189190613a11565b60405180910390f35b61033b60048036038101906103369190613037565b610c1b565b6040516103489190613655565b60405180910390f35b61036b6004803603810190610366919061309c565b610cb9565b005b610375610de3565b60405161038291906139cd565b60405180910390f35b6103a560048036038101906103a0919061309c565b610de9565b005b6103af610fdf565b6040516103bc91906139cd565b60405180910390f35b6103cd610fef565b6040516103da91906139cd565b60405180910390f35b6103eb611076565b005b6104076004803603810190610402919061309c565b61113f565b005b610411611408565b60405161041e91906139cd565b60405180910390f35b61042f61140e565b60405161043c91906139cd565b60405180910390f35b61044d611414565b60405161045a91906139cd565b60405180910390f35b61047d60048036038101906104789190612f83565b611420565b60405161048a91906139cd565b60405180910390f35b61049b611469565b6040516104a891906139cd565b60405180910390f35b6104b961148c565b6040516104c691906139cd565b60405180910390f35b6104d7611492565b6040516104e491906139cd565b60405180910390f35b6104f5611498565b604051610502919061368b565b60405180910390f35b610525600480360381019061052091906130ee565b61152a565b005b610541600480360381019061053c9190613037565b6115c6565b60405161054e9190613655565b60405180910390f35b610571600480360381019061056c9190613037565b611664565b60405161057e9190613655565b60405180910390f35b61058f61167b565b60405161059c9190613670565b60405180910390f35b6105ad6116a1565b6040516105ba91906139cd565b60405180910390f35b6105cb611763565b6040516105d891906139cd565b60405180910390f35b6105fb60048036038101906105f6919061309c565b611769565b005b6106176004803603810190610612919061309c565b61183a565b005b610621611a00565b60405161062e91906139cd565b60405180910390f35b610651600480360381019061064c9190612fac565b611ab2565b60405161065e91906139cd565b60405180910390f35b610681600480360381019061067c919061309c565b611b39565b005b61068b611c77565b6040516106989190613519565b60405180910390f35b6060600480546106b090613c09565b80601f01602080910402602001604051908101604052809291908181526020018280546106dc90613c09565b80156107295780601f106106fe57610100808354040283529160200191610729565b820191906000526020600020905b81548152906001019060200180831161070c57829003601f168201915b5050505050905090565b6000610740338484611c9d565b6001905092915050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600354905090565b6000610787848484611e68565b610819843384600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108149190613b29565b611c9d565b600190509392505050565b600b5461082f6116a1565b1161086f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610866906136ed565b60405180910390fd5b600061087a33611420565b116108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b19061378d565b60405180910390fd5b6000610977600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161091a9190613519565b60206040518083038186803b15801561093257600080fd5b505afa158015610946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096a91906130c5565b610972610770565b6120ce565b9050600061098433611420565b90506000610992828461210a565b905060006109a282600d5461210a565b905060006109b0838361214e565b90507f158ba9ab7bbbd08eeffa4753bad41f4d450e24831d293427308badf3eadd8c76338585856040516109e79493929190613610565b60405180910390a16109f933856121a7565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610a5692919061356b565b602060405180830381600087803b158015610a7057600080fd5b505af1158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa89190613073565b610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade9061396d565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610b6692919061356b565b602060405180830381600087803b158015610b8057600080fd5b505af1158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190613073565b610bf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bee9061384d565b60405180910390fd5b5050505050565b600d5481565b6000600660009054906101000a900460ff16905090565b6000610caf338484600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610caa9190613a48565b611c9d565b6001905092915050565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d409061380d565b60405180910390fd5b80600081118015610d62575068056bc75e2d6310000081105b610da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d98906138ed565b60405180910390fd5b81600b819055507f28e98951093a92e2a12cfccced98a5e14ff4a69f23c1137a90353ea343a879d582604051610dd791906139cd565b60405180910390a15050565b60095481565b60008111610e2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e239061392d565b60405180910390fd5b80610e3633611420565b1015610e77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6e906137ed565b60405180910390fd5b6000610e81610fef565b90506000610e96610e90611469565b836120ce565b90506000610ea4828561210a565b90507f7575c9e41ba6d91ef21e39bd62b5b9df62fc9b0401379fdf9fe1fa372f41e7c1338583604051610ed9939291906135d9565b60405180910390a1610eeb33856121a7565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610f4892919061356b565b602060405180830381600087803b158015610f6257600080fd5b505af1158015610f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9a9190613073565b610fd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd09061376d565b60405180910390fd5b50505050565b6b033b2e3c9fd0803ce800000081565b600080600061100d600854600c54426110089190613b29565b612323565b509150915081611052576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110499061386d565b60405180910390fd5b61106f8161106a670de0b6b3a76400006009546124de565b612528565b9250505090565b6000600f54426110869190613b29565b9050600081116110cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c29061382d565b60405180910390fd5b42600f819055506110e1600754600e5483612595565b600781905550600061110d6111006110f7610770565b600e54856125b3565b611108610770565b61214e565b905061113b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826125d1565b5050565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c69061380d565b60405180910390fd5b6000611295611288600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112329190613519565b60206040518083038186803b15801561124a57600080fd5b505afa15801561125e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128291906130c5565b8461214e565b611290610770565b61274d565b90507f627a692d5a03ab34732c0d2aa319f3ecdebdc4528f383eabcb25441dc0a70cfb3383836040516112ca939291906135d9565b60405180910390a1600b548110611316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130d9061370d565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161137392919061356b565b602060405180830381600087803b15801561138d57600080fd5b505af11580156113a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c59190613073565b611404576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fb9061398d565b60405180910390fd5b5050565b600e5481565b600c5481565b670de0b6b3a764000081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000611487600754600e54600f54426114829190613b29565b612595565b905090565b600b5481565b600f5481565b6060600580546114a790613c09565b80601f01602080910402602001604051908101604052809291908181526020018280546114d390613c09565b80156115205780601f106114f557610100808354040283529160200191611520565b820191906000526020600020905b81548152906001019060200180831161150357829003601f168201915b5050505050905090565b61153481836125d1565b600061153e6116a1565b90507f8aa79244595326e02b94ff370fec2bf34048b114fa3566a1928de6961944b6c4338484846040516115759493929190613594565b60405180910390a1600b5481106115c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b89061370d565b60405180910390fd5b505050565b600061165a338484600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116559190613b29565b611c9d565b6001905092915050565b6000611671338484611e68565b6001905092915050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061175e600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117019190613519565b60206040518083038186803b15801561171957600080fd5b505afa15801561172d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175191906130c5565b611759610770565b61274d565b905090565b60085481565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f09061380d565b60405180910390fd5b80600c819055507ff446a856a251d3949a294b9b5a1887d32750b34a18bb135814cfc300119ca84d8160405161182f91906139cd565b60405180910390a150565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c19061380d565b60405180910390fd5b6000811161190d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119049061388d565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161196c93929190613534565b602060405180830381600087803b15801561198657600080fd5b505af115801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be9190613073565b6119fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f4906138ad565b60405180910390fd5b50565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a5d9190613519565b60206040518083038186803b158015611a7557600080fd5b505afa158015611a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aad91906130c5565b905090565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc09061380d565b60405180910390fd5b80600081118015611be2575068056bc75e2d6310000081105b611c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c18906138ed565b60405180910390fd5b611c348268056bc75e2d631000006120ce565b600d819055507fb410b9fb1c7ee253f64b4393c5fa78a4d64c9f4495828b8c9e62813a5c53528d600d54604051611c6b91906139cd565b60405180910390a15050565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d049061394d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d749061372d565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611e5b91906139cd565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ed8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecf9061390d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3f906136cd565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f939190613b29565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120219190613a48565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120c191906139cd565b60405180910390a3505050565b6000816120f86120e685670de0b6b3a7640000612528565b6002856120f39190613a9e565b612818565b6121029190613a9e565b905092915050565b6000670de0b6b3a764000061213c6121228585612528565b6002670de0b6b3a76400006121379190613a9e565b612818565b6121469190613a9e565b905092915050565b600082828461215d9190613b29565b91508111156121a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612198906136ad565b60405180910390fd5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220e906138cd565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122629190613b29565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806003546122b39190613b29565b600381905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161231791906139cd565b60405180910390a35050565b60008060008060006123358787612871565b915091508161235057600080600094509450945050506124d7565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377fbb66389846040518363ffffffff1660e01b81526004016123ae9291906139e8565b60206040518083038186803b1580156123c657600080fd5b505afa1580156123da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fe91906130c5565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393fa491589836040518363ffffffff1660e01b815260040161245b9291906139e8565b60206040518083038186803b15801561247357600080fd5b505afa158015612487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ab91906130c5565b945060008511156124c857600185829550955095505050506124d7565b60008060009550955095505050505b9250925092565b600061252083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612db5565b905092915050565b6000808214806125505750828283856125419190613acf565b92508261254e9190613a9e565b145b61258f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125869061374d565b60405180910390fd5b92915050565b60006125aa846125a58585612e18565b612ea3565b90509392505050565b60006125c8846125c38585612e18565b612ee3565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612641576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612638906139ad565b60405180910390fd5b8060035461264f9190613a48565b60038190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126a09190613a48565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161274191906139cd565b60405180910390a35050565b6000808311612791576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612788906137cd565b60405180910390fd5b60008214156127a35760009050612812565b60006127b66127b0610fef565b8561210a565b90506000600f54426127c89190613b29565b905060006127d985600e54846125b3565b905060006127ee6127e8611469565b8361210a565b905061280b670de0b6b3a764000061280683876120ce565b612818565b9450505050505b92915050565b60008282846128279190613a48565b915081101561286b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612862906137ad565b60405180910390fd5b92915050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166346eee1c4866040518263ffffffff1660e01b81526004016128d091906139cd565b60206040518083038186803b1580156128e857600080fd5b505afa1580156128fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292091906130c5565b90506000811115612da5576000806000905060006001846129419190613b29565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377fbb6638a856040518363ffffffff1660e01b81526004016129a19291906139e8565b60206040518083038186803b1580156129b957600080fd5b505afa1580156129cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f191906130c5565b9050878110612a0b57600080965096505050505050612dae565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377fbb6638a846040518363ffffffff1660e01b8152600401612a669291906139e8565b60206040518083038186803b158015612a7e57600080fd5b505afa158015612a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab691906130c5565b905087811015612ad157600182965096505050505050612dae565b5b600115612da05782600160028585612aea9190613b29565b612af49190613a9e565b612afe9190613a48565b612b089190613a48565b935060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377fbb6638a866040518363ffffffff1660e01b8152600401612b659291906139e8565b60206040518083038186803b158015612b7d57600080fd5b505afa158015612b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb591906130c5565b905087811015612ca95760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377fbb6638b600188612c0c9190613a48565b6040518363ffffffff1660e01b8152600401612c299291906139e8565b60206040518083038186803b158015612c4157600080fd5b505afa158015612c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7991906130c5565b9050888110612c945760018597509750505050505050612dae565b600185612ca19190613a48565b935050612d9b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377fbb6638b600188612cf69190613b29565b6040518363ffffffff1660e01b8152600401612d139291906139e8565b60206040518083038186803b158015612d2b57600080fd5b505afa158015612d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6391906130c5565b905088811015612d8a5760018086612d7b9190613b29565b97509750505050505050612dae565b600185612d979190613b29565b9250505b612ad2565b505050505b60008092509250505b9250929050565b60008083118290612dfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df3919061368b565b60405180910390fd5b5060008385612e0b9190613a9e565b9050809150509392505050565b600080600283612e289190613c3b565b1415612e40576b033b2e3c9fd0803ce8000000612e42565b825b9050600282612e519190613a9e565b91505b60008214612e9d57612e668384612ee3565b92506000600283612e779190613c3b565b14612e8957612e868184612ee3565b90505b600282612e969190613a9e565b9150612e54565b92915050565b600081612ed1612ebf856b033b2e3c9fd0803ce8000000612528565b600285612ecc9190613a9e565b612818565b612edb9190613a9e565b905092915050565b60006b033b2e3c9fd0803ce8000000612f1d612eff8585612528565b60026b033b2e3c9fd0803ce8000000612f189190613a9e565b612818565b612f279190613a9e565b905092915050565b600081359050612f3e816142ad565b92915050565b600081519050612f53816142c4565b92915050565b600081359050612f68816142db565b92915050565b600081519050612f7d816142db565b92915050565b600060208284031215612f9557600080fd5b6000612fa384828501612f2f565b91505092915050565b60008060408385031215612fbf57600080fd5b6000612fcd85828601612f2f565b9250506020612fde85828601612f2f565b9150509250929050565b600080600060608486031215612ffd57600080fd5b600061300b86828701612f2f565b935050602061301c86828701612f2f565b925050604061302d86828701612f59565b9150509250925092565b6000806040838503121561304a57600080fd5b600061305885828601612f2f565b925050602061306985828601612f59565b9150509250929050565b60006020828403121561308557600080fd5b600061309384828501612f44565b91505092915050565b6000602082840312156130ae57600080fd5b60006130bc84828501612f59565b91505092915050565b6000602082840312156130d757600080fd5b60006130e584828501612f6e565b91505092915050565b6000806040838503121561310157600080fd5b600061310f85828601612f59565b925050602061312085828601612f2f565b9150509250929050565b61313381613b5d565b82525050565b61314281613b6f565b82525050565b61315181613bb2565b82525050565b600061316282613a2c565b61316c8185613a37565b935061317c818560208601613bd6565b61318581613cf9565b840191505092915050565b600061319d601583613a37565b91506131a882613d0a565b602082019050919050565b60006131c0602383613a37565b91506131cb82613d33565b604082019050919050565b60006131e3602983613a37565b91506131ee82613d82565b604082019050919050565b6000613206602a83613a37565b915061321182613dd1565b604082019050919050565b6000613229602283613a37565b915061323482613e20565b604082019050919050565b600061324c601483613a37565b915061325782613e6f565b602082019050919050565b600061326f601883613a37565b915061327a82613e98565b602082019050919050565b6000613292602183613a37565b915061329d82613ec1565b604082019050919050565b60006132b5601483613a37565b91506132c082613f10565b602082019050919050565b60006132d8601f83613a37565b91506132e382613f39565b602082019050919050565b60006132fb601283613a37565b915061330682613f62565b602082019050919050565b600061331e600c83613a37565b915061332982613f8b565b602082019050919050565b6000613341601983613a37565b915061334c82613fb4565b602082019050919050565b6000613364602d83613a37565b915061336f82613fdd565b604082019050919050565b6000613387601483613a37565b91506133928261402c565b602082019050919050565b60006133aa601083613a37565b91506133b582614055565b602082019050919050565b60006133cd602283613a37565b91506133d88261407e565b604082019050919050565b60006133f0602183613a37565b91506133fb826140cd565b604082019050919050565b6000613413601f83613a37565b915061341e8261411c565b602082019050919050565b6000613436602583613a37565b915061344182614145565b604082019050919050565b6000613459601f83613a37565b915061346482614194565b602082019050919050565b600061347c602483613a37565b9150613487826141bd565b604082019050919050565b600061349f602583613a37565b91506134aa8261420c565b604082019050919050565b60006134c2601983613a37565b91506134cd8261425b565b602082019050919050565b60006134e5601f83613a37565b91506134f082614284565b602082019050919050565b61350481613b9b565b82525050565b61351381613ba5565b82525050565b600060208201905061352e600083018461312a565b92915050565b6000606082019050613549600083018661312a565b613556602083018561312a565b61356360408301846134fb565b949350505050565b6000604082019050613580600083018561312a565b61358d60208301846134fb565b9392505050565b60006080820190506135a9600083018761312a565b6135b660208301866134fb565b6135c3604083018561312a565b6135d060608301846134fb565b95945050505050565b60006060820190506135ee600083018661312a565b6135fb60208301856134fb565b61360860408301846134fb565b949350505050565b6000608082019050613625600083018761312a565b61363260208301866134fb565b61363f60408301856134fb565b61364c60608301846134fb565b95945050505050565b600060208201905061366a6000830184613139565b92915050565b60006020820190506136856000830184613148565b92915050565b600060208201905081810360008301526136a58184613157565b905092915050565b600060208201905081810360008301526136c681613190565b9050919050565b600060208201905081810360008301526136e6816131b3565b9050919050565b60006020820190508181036000830152613706816131d6565b9050919050565b60006020820190508181036000830152613726816131f9565b9050919050565b600060208201905081810360008301526137468161321c565b9050919050565b600060208201905081810360008301526137668161323f565b9050919050565b6000602082019050818103600083015261378681613262565b9050919050565b600060208201905081810360008301526137a681613285565b9050919050565b600060208201905081810360008301526137c6816132a8565b9050919050565b600060208201905081810360008301526137e6816132cb565b9050919050565b60006020820190508181036000830152613806816132ee565b9050919050565b6000602082019050818103600083015261382681613311565b9050919050565b6000602082019050818103600083015261384681613334565b9050919050565b6000602082019050818103600083015261386681613357565b9050919050565b600060208201905081810360008301526138868161337a565b9050919050565b600060208201905081810360008301526138a68161339d565b9050919050565b600060208201905081810360008301526138c6816133c0565b9050919050565b600060208201905081810360008301526138e6816133e3565b9050919050565b6000602082019050818103600083015261390681613406565b9050919050565b6000602082019050818103600083015261392681613429565b9050919050565b600060208201905081810360008301526139468161344c565b9050919050565b600060208201905081810360008301526139668161346f565b9050919050565b6000602082019050818103600083015261398681613492565b9050919050565b600060208201905081810360008301526139a6816134b5565b9050919050565b600060208201905081810360008301526139c6816134d8565b9050919050565b60006020820190506139e260008301846134fb565b92915050565b60006040820190506139fd60008301856134fb565b613a0a60208301846134fb565b9392505050565b6000602082019050613a26600083018461350a565b92915050565b600081519050919050565b600082825260208201905092915050565b6000613a5382613b9b565b9150613a5e83613b9b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613a9357613a92613c6c565b5b828201905092915050565b6000613aa982613b9b565b9150613ab483613b9b565b925082613ac457613ac3613c9b565b5b828204905092915050565b6000613ada82613b9b565b9150613ae583613b9b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b1e57613b1d613c6c565b5b828202905092915050565b6000613b3482613b9b565b9150613b3f83613b9b565b925082821015613b5257613b51613c6c565b5b828203905092915050565b6000613b6882613b7b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613bbd82613bc4565b9050919050565b6000613bcf82613b7b565b9050919050565b60005b83811015613bf4578082015181840152602081019050613bd9565b83811115613c03576000848401525b50505050565b60006002820490506001821680613c2157607f821691505b60208210811415613c3557613c34613cca565b5b50919050565b6000613c4682613b9b565b9150613c5183613b9b565b925082613c6157613c60613c9b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f636f6c6c61746572616c207574696c697a61746f696e2069732062656c6f772060008201527f7468726573686f6c640000000000000000000000000000000000000000000000602082015250565b7f636f6c6c61746572616c207574696c697a6174696f6e2061626f76652074686560008201527f207468726573686f6c6400000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000600082015250565b7f636f6c6c61746572616c207472616e73666572206661696c0000000000000000600082015250565b7f6d73672073656e64657220646f65736e2774206f776e20616e7920746f6b656e60008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000600082015250565b7f636f6c6c61746572616c20746f74616c20737570706c79206973207a65726f00600082015250565b7f6e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b7f6e6f7420616e2061646d696e0000000000000000000000000000000000000000600082015250565b7f6e6f20696e666c6174696f6e20696e6372656173652079657400000000000000600082015250565b7f636f6c6c61746572616c206c69717569646174696f6e2070656e616c7479207460008201527f72616e73666572206661696c7300000000000000000000000000000000000000602082015250565b7f67657474696e67206f7261636c65207072696365000000000000000000000000600082015250565b7f6465706f73697420616d6f756e74203000000000000000000000000000000000600082015250565b7f6661696c656420636f6c6c61746572616c206465706f736974207472616e736660008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f76616c7565206e6f742077697468696e20616c6c6f776564206c696d69747300600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f616d6f756e742073686f756c642062652067726561746572207468616e203000600082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f636f6c6c61746572616c206c69717569646174696f6e207472616e736665722060008201527f6661696c73000000000000000000000000000000000000000000000000000000602082015250565b7f636f6c6c61746572616c207472616e73666572206661696c7300000000000000600082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6142b681613b5d565b81146142c157600080fd5b50565b6142cd81613b6f565b81146142d857600080fd5b50565b6142e481613b9b565b81146142ef57600080fd5b5056fea2646970667358221220af15bfde6ff86413da7fcbfdb5e0dfa59dd1b0073fac568114104869ce34fa3964736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2440,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "tellor",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITellor)2437"
      },
      {
        "astId": 819,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 825,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 827,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 829,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 831,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 833,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "_decimals",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 62,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "admin",
        "offset": 1,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 65,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "tknPrice",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 67,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "collateralID",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 69,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "collateralPriceGranularity",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 72,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "collateralToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ERC20)1257"
      },
      {
        "astId": 75,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "collateralThreshold",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 78,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "collateralPriceAge",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 81,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "liquidationPenatly",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 83,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "inflRatePerSec",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 87,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "inflLastUpdate",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 89,
        "contract": "contracts/Chorus.sol:Chorus",
        "label": "inflBeneficiary",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)1257": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITellor)2437": {
        "encoding": "inplace",
        "label": "contract ITellor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}