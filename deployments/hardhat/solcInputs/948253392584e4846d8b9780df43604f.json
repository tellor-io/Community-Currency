{
  "language": "Solidity",
  "sources": {
    "contracts/MockOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.3;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract MockOracle {\n    using SafeMath for uint256;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event TipAdded(\n        address indexed _sender,\n        uint256 indexed _requestId,\n        uint256 _tip\n    );\n    event NewValue(uint256 _requestId, uint256 _time, uint256 _value);\n\n    mapping(uint256 => mapping(uint256 => uint256)) public values; //requestId -> timestamp -> value\n    mapping(uint256 => mapping(uint256 => bool)) public isDisputed; //requestId -> timestamp -> value\n    mapping(uint256 => uint256[]) public timestamps;\n    mapping(address => uint256) public balances;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor() {\n        _name = \"Tribute\";\n        _symbol = \"TRB\";\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Public function to mint tokens for the passed address\n     * @param user The address which will own the tokens\n     *\n     */\n    function faucet(address user) external {\n        _mint(user, 1000 ether);\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev Returns the total supply of the token.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the balance of a given user.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev Transfer tokens from user to another\n     * @param recipient The destination address\n     * @param amount The amount of tokens, including decimals, to transfer\n     * @return bool If the transfer succeeded\n     *\n     */\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        returns (bool)\n    {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev Retruns the amount that an address is alowed to spend of behalf of other\n     * @param owner The address which owns the tokens\n     * @param spender The address that will use the tokens\n     * @return uint256 Indicating the amount of allowed tokens\n     *\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev Approves  amount that an address is alowed to spend of behalf of other\n     * @param spender The address which user the tokens\n     * @param amount The amount that msg.sender is allowing spender to use\n     * @return bool If the transaction succeeded\n     *\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from user to another\n     * @param sender The address which owns the tokens\n     * @param recipient The destination address\n     * @param amount The amount of tokens, including decimals, to transfer\n     * @return bool If the transfer succeeded\n     *\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Helper function to increase the allowance\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Helper function to increase the allowance\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Internal function to perform token transfer\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /**\n     * @dev Internal function to create new tokens for the user\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Internal function to burn tokens for the user\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Internal function to approve tokens for the user\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev A mock function to submit a value to be read withoun miners needed\n     * @param _requestId The tellorId to associate the value to\n     * @param _value the value for the requestId\n     */\n    function submitValue(uint256 _requestId, uint256 _value) external {\n        values[_requestId][block.timestamp] = _value;\n        timestamps[_requestId].push(block.timestamp);\n        emit NewValue(_requestId, block.timestamp, _value);\n    }\n\n    /**\n     * @dev A mock function to create a dispute\n     * @param _requestId The tellorId to be disputed\n     * @param _timestamp the timestamp that indentifies for the value\n     */\n    function disputeValue(uint256 _requestId, uint256 _timestamp) external {\n        values[_requestId][_timestamp] = 0;\n        isDisputed[_requestId][_timestamp] = true;\n    }\n\n    /**\n     * @dev Retreive value from oracle based on requestId/timestamp\n     * @param _requestId being requested\n     * @param _timestamp to retreive data/value from\n     * @return uint value for requestId/timestamp submitted\n     */\n    function retrieveData(uint256 _requestId, uint256 _timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        return values[_requestId][_timestamp];\n    }\n\n    /**\n     * @dev Gets if the mined value for the specified requestId/_timestamp is currently under dispute\n     * @param _requestId to looku p\n     * @param _timestamp is the timestamp to look up miners for\n     * @return bool true if requestId/timestamp is under dispute\n     */\n    function isInDispute(uint256 _requestId, uint256 _timestamp)\n        public\n        view\n        returns (bool)\n    {\n        return isDisputed[_requestId][_timestamp];\n    }\n\n    /**\n     * @dev Counts the number of values that have been submited for the request\n     * @param _requestId the requestId to look up\n     * @return uint count of the number of values received for the requestId\n     */\n    function getNewValueCountbyRequestId(uint256 _requestId)\n        public\n        view\n        returns (uint256)\n    {\n        return timestamps[_requestId].length;\n    }\n\n    /**\n     * @dev Gets the timestamp for the value based on their index\n     * @param _requestId is the requestId to look up\n     * @param index is the value index to look up\n     * @return uint timestamp\n     */\n    function getTimestampbyRequestIDandIndex(uint256 _requestId, uint256 index)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 len = timestamps[_requestId].length;\n        if (len == 0 || len <= index) return 0;\n        return timestamps[_requestId][index];\n    }\n\n    /**\n     * @dev Adds a tip to a given request Id.\n     * @param _requestId is the requestId to look up\n     * @param _amount is the amount of tips\n     */\n    function addTip(uint256 _requestId, uint256 _amount) external {\n        _transfer(msg.sender, address(this), _amount);\n        emit TipAdded(msg.sender, _requestId, _amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}